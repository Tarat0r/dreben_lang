# Generated from dreben_lang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,262,8,24,1,25,1,25,5,25,266,8,25,10,
        25,12,25,269,9,25,1,26,4,26,272,8,26,11,26,12,26,273,1,27,1,27,1,
        27,1,27,5,27,280,8,27,10,27,12,27,283,9,27,1,27,1,27,1,28,1,28,1,
        28,1,28,5,28,291,8,28,10,28,12,28,294,9,28,1,28,1,28,1,29,1,29,1,
        29,1,29,5,29,302,8,29,10,29,12,29,305,9,29,1,29,1,29,1,29,1,29,1,
        29,1,30,4,30,313,8,30,11,30,12,30,314,1,30,1,30,1,303,0,31,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,1,0,6,4,0,65,90,95,95,97,122,
        1040,1103,5,0,48,57,65,90,95,95,97,122,1040,1103,1,0,48,57,4,0,10,
        10,13,13,34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,325,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,78,1,0,0,0,9,84,1,
        0,0,0,11,86,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,0,19,
        101,1,0,0,0,21,103,1,0,0,0,23,105,1,0,0,0,25,111,1,0,0,0,27,118,
        1,0,0,0,29,121,1,0,0,0,31,131,1,0,0,0,33,136,1,0,0,0,35,142,1,0,
        0,0,37,148,1,0,0,0,39,159,1,0,0,0,41,173,1,0,0,0,43,187,1,0,0,0,
        45,211,1,0,0,0,47,226,1,0,0,0,49,261,1,0,0,0,51,263,1,0,0,0,53,271,
        1,0,0,0,55,275,1,0,0,0,57,286,1,0,0,0,59,297,1,0,0,0,61,312,1,0,
        0,0,63,64,5,40,0,0,64,2,1,0,0,0,65,66,5,41,0,0,66,4,1,0,0,0,67,68,
        5,1055,0,0,68,69,5,1088,0,0,69,70,5,1086,0,0,70,71,5,1084,0,0,71,
        72,5,1077,0,0,72,73,5,1085,0,0,73,74,5,1083,0,0,74,75,5,1080,0,0,
        75,76,5,1074,0,0,76,77,5,1072,0,0,77,6,1,0,0,0,78,79,5,1088,0,0,
        79,80,5,1072,0,0,80,81,5,1074,0,0,81,82,5,1085,0,0,82,83,5,1072,
        0,0,83,8,1,0,0,0,84,85,5,59,0,0,85,10,1,0,0,0,86,87,5,1055,0,0,87,
        88,5,1086,0,0,88,89,5,1082,0,0,89,90,5,1072,0,0,90,91,5,1078,0,0,
        91,92,5,1080,0,0,92,12,1,0,0,0,93,94,5,123,0,0,94,14,1,0,0,0,95,
        96,5,125,0,0,96,16,1,0,0,0,97,98,5,1040,0,0,98,99,5,1082,0,0,99,
        100,5,1086,0,0,100,18,1,0,0,0,101,102,5,8222,0,0,102,20,1,0,0,0,
        103,104,5,8220,0,0,104,22,1,0,0,0,105,106,5,1048,0,0,106,107,5,1085,
        0,0,107,108,5,1072,0,0,108,109,5,1095,0,0,109,110,5,1077,0,0,110,
        24,1,0,0,0,111,112,5,1044,0,0,112,113,5,1086,0,0,113,114,5,1082,
        0,0,114,115,5,1072,0,0,115,116,5,1090,0,0,116,117,5,1086,0,0,117,
        26,1,0,0,0,118,119,5,1087,0,0,119,120,5,1086,0,0,120,28,1,0,0,0,
        121,122,5,1076,0,0,122,123,5,1077,0,0,123,124,5,1083,0,0,124,125,
        5,1077,0,0,125,126,5,1085,0,0,126,127,5,1086,0,0,127,128,5,32,0,
        0,128,129,5,1085,0,0,129,130,5,1072,0,0,130,30,1,0,0,0,131,132,5,
        1087,0,0,132,133,5,1083,0,0,133,134,5,1102,0,0,134,135,5,1089,0,
        0,135,32,1,0,0,0,136,137,5,1084,0,0,137,138,5,1080,0,0,138,139,5,
        1085,0,0,139,140,5,1091,0,0,140,141,5,1089,0,0,141,34,1,0,0,0,142,
        143,5,1088,0,0,143,144,5,1072,0,0,144,145,5,1074,0,0,145,146,5,1085,
        0,0,146,147,5,1086,0,0,147,36,1,0,0,0,148,149,5,1077,0,0,149,150,
        5,32,0,0,150,151,5,1088,0,0,151,152,5,1072,0,0,152,153,5,1074,0,
        0,153,154,5,1085,0,0,154,155,5,1086,0,0,155,156,5,32,0,0,156,157,
        5,1085,0,0,157,158,5,1072,0,0,158,38,1,0,0,0,159,160,5,1053,0,0,
        160,161,5,1045,0,0,161,162,5,32,0,0,162,163,5,1077,0,0,163,164,5,
        32,0,0,164,165,5,1088,0,0,165,166,5,1072,0,0,166,167,5,1074,0,0,
        167,168,5,1085,0,0,168,169,5,1086,0,0,169,170,5,32,0,0,170,171,5,
        1085,0,0,171,172,5,1072,0,0,172,40,1,0,0,0,173,174,5,1077,0,0,174,
        175,5,32,0,0,175,176,5,1087,0,0,176,177,5,1086,0,0,177,178,5,45,
        0,0,178,179,5,1084,0,0,179,180,5,1072,0,0,180,181,5,1083,0,0,181,
        182,5,1082,0,0,182,183,5,1086,0,0,183,184,5,32,0,0,184,185,5,1086,
        0,0,185,186,5,1090,0,0,186,42,1,0,0,0,187,188,5,1077,0,0,188,189,
        5,32,0,0,189,190,5,1087,0,0,190,191,5,1086,0,0,191,192,5,45,0,0,
        192,193,5,1084,0,0,193,194,5,1072,0,0,194,195,5,1083,0,0,195,196,
        5,1082,0,0,196,197,5,1086,0,0,197,198,5,32,0,0,198,199,5,1080,0,
        0,199,200,5,1083,0,0,200,201,5,1080,0,0,201,202,5,32,0,0,202,203,
        5,1088,0,0,203,204,5,1072,0,0,204,205,5,1074,0,0,205,206,5,1085,
        0,0,206,207,5,1086,0,0,207,208,5,32,0,0,208,209,5,1086,0,0,209,210,
        5,1090,0,0,210,44,1,0,0,0,211,212,5,1077,0,0,212,213,5,32,0,0,213,
        214,5,1087,0,0,214,215,5,1086,0,0,215,216,5,45,0,0,216,217,5,1075,
        0,0,217,218,5,1086,0,0,218,219,5,1083,0,0,219,220,5,1103,0,0,220,
        221,5,1084,0,0,221,222,5,1086,0,0,222,223,5,32,0,0,223,224,5,1086,
        0,0,224,225,5,1090,0,0,225,46,1,0,0,0,226,227,5,1077,0,0,227,228,
        5,32,0,0,228,229,5,1087,0,0,229,230,5,1086,0,0,230,231,5,45,0,0,
        231,232,5,1075,0,0,232,233,5,1086,0,0,233,234,5,1083,0,0,234,235,
        5,1103,0,0,235,236,5,1084,0,0,236,237,5,1086,0,0,237,238,5,32,0,
        0,238,239,5,1080,0,0,239,240,5,1083,0,0,240,241,5,1080,0,0,241,242,
        5,32,0,0,242,243,5,1088,0,0,243,244,5,1072,0,0,244,245,5,1074,0,
        0,245,246,5,1085,0,0,246,247,5,1086,0,0,247,248,5,32,0,0,248,249,
        5,1086,0,0,249,250,5,1090,0,0,250,48,1,0,0,0,251,252,5,1048,0,0,
        252,253,5,1089,0,0,253,254,5,1090,0,0,254,255,5,1080,0,0,255,256,
        5,1085,0,0,256,262,5,1072,0,0,257,258,5,1051,0,0,258,259,5,1098,
        0,0,259,260,5,1078,0,0,260,262,5,1072,0,0,261,251,1,0,0,0,261,257,
        1,0,0,0,262,50,1,0,0,0,263,267,7,0,0,0,264,266,7,1,0,0,265,264,1,
        0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,52,1,0,
        0,0,269,267,1,0,0,0,270,272,7,2,0,0,271,270,1,0,0,0,272,273,1,0,
        0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,54,1,0,0,0,275,281,5,34,
        0,0,276,280,8,3,0,0,277,278,5,92,0,0,278,280,9,0,0,0,279,276,1,0,
        0,0,279,277,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,
        0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,5,34,0,0,285,56,1,0,
        0,0,286,287,5,47,0,0,287,288,5,47,0,0,288,292,1,0,0,0,289,291,8,
        4,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,
        0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,6,28,0,0,296,58,1,
        0,0,0,297,298,5,47,0,0,298,299,5,42,0,0,299,303,1,0,0,0,300,302,
        9,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,304,1,0,0,0,303,301,
        1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,42,0,0,307,308,
        5,47,0,0,308,309,1,0,0,0,309,310,6,29,0,0,310,60,1,0,0,0,311,313,
        7,5,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,315,
        1,0,0,0,315,316,1,0,0,0,316,317,6,30,0,0,317,62,1,0,0,0,9,0,261,
        267,273,279,281,292,303,314,1,6,0,0
    ]

class dreben_langLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    ASTERISK = 14
    SLASH = 15
    PLUS = 16
    MINUS = 17
    ASSIGN = 18
    EQUAL = 19
    NOT_EQUAL = 20
    LESS = 21
    LESS_OR_EQUAL = 22
    GREATER = 23
    GREATER_OR_EQUAL = 24
    BOOL = 25
    ID = 26
    NUM = 27
    STRING = 28
    LINE_COMMENT = 29
    COMMENT = 30
    SPACE = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'\\u041F\\u0440\\u043E\\u043C\\u0435\\u043D\\u043B\\u0438\\u0432\\u0430'", 
            "'\\u0440\\u0430\\u0432\\u043D\\u0430'", "';'", "'\\u041F\\u043E\\u043A\\u0430\\u0436\\u0438'", 
            "'{'", "'}'", "'\\u0410\\u043A\\u043E'", "'\\u201E'", "'\\u201C'", 
            "'\\u0418\\u043D\\u0430\\u0447\\u0435'", "'\\u0414\\u043E\\u043A\\u0430\\u0442\\u043E'", 
            "'\\u043F\\u043E'", "'\\u0434\\u0435\\u043B\\u0435\\u043D\\u043E \\u043D\\u0430'", 
            "'\\u043F\\u043B\\u044E\\u0441'", "'\\u043C\\u0438\\u043D\\u0443\\u0441'", 
            "'\\u0440\\u0430\\u0432\\u043D\\u043E'", "'\\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u043D\\u0430'", 
            "'\\u041D\\u0415 \\u0435 \\u0440\\u0430\\u0432\\u043D\\u043E \\u043D\\u0430'", 
            "'\\u0435 \\u043F\\u043E-\\u043C\\u0430\\u043B\\u043A\\u043E \\u043E\\u0442'", 
            "'\\u0435 \\u043F\\u043E-\\u043C\\u0430\\u043B\\u043A\\u043E \\u0438\\u043B\\u0438 \\u0440\\u0430\\u0432\\u043D\\u043E \\u043E\\u0442'", 
            "'\\u0435 \\u043F\\u043E-\\u0433\\u043E\\u043B\\u044F\\u043C\\u043E \\u043E\\u0442'", 
            "'\\u0435 \\u043F\\u043E-\\u0433\\u043E\\u043B\\u044F\\u043C\\u043E \\u0438\\u043B\\u0438 \\u0440\\u0430\\u0432\\u043D\\u043E \\u043E\\u0442'" ]

    symbolicNames = [ "<INVALID>",
            "ASTERISK", "SLASH", "PLUS", "MINUS", "ASSIGN", "EQUAL", "NOT_EQUAL", 
            "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", "BOOL", 
            "ID", "NUM", "STRING", "LINE_COMMENT", "COMMENT", "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "ASTERISK", 
                  "SLASH", "PLUS", "MINUS", "ASSIGN", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "BOOL", "ID", "NUM", "STRING", "LINE_COMMENT", "COMMENT", 
                  "SPACE" ]

    grammarFileName = "dreben_lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


